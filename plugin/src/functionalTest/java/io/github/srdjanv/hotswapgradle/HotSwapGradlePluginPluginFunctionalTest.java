/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.srdjanv.hotswapgradle;

import io.github.srdjanv.hotswapgradle.base.ProjectFile;
import io.github.srdjanv.hotswapgradle.base.SettingsFile;
import io.github.srdjanv.hotswapgradle.base.TestUtil;
import java.io.File;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

// todo add an way to test legacy dcevm
class HotSwapGradlePluginPluginFunctionalTest {
    @TempDir
    File projectDir;

    @Test
    void canRunBuild() {
        var runner = TestUtil.provideTestRunner(
                projectDir,
                TestUtil::defaultConfig,
                settingsFile -> settingsFile.plugin(SettingsFile.Plugins.FOOJAY),
                projectFile -> projectFile.plugin(ProjectFile.Plugins.HOTSWAP));
        runner.build();
    }

    @Test
    void canProvideJDK8Agent() {
        var runner = TestUtil.provideTestRunner(
                projectDir,
                TestUtil::defaultConfig,
                settingsFile -> settingsFile.plugin(SettingsFile.Plugins.FOOJAY),
                projectFile -> {
                    projectFile.plugin(ProjectFile.Plugins.APPLICATION);
                    projectFile.plugin(ProjectFile.Plugins.HOTSWAP);
                    projectFile.append(ProjectFile.Options.APPLICATION_MAIN);
                    projectFile.setMainCodeJDKLOG();
                    projectFile.append(ProjectFile.Options.REQUEST_HOTSWAP_JDK_8);
                });

        var buildResult = runner.withArguments("run").build();
        Assertions.assertTrue(TestUtil.isAgentActive(buildResult));
    }

    @Test
    void canProvideJDK11Agent() {
        var runner = TestUtil.provideTestRunner(
                projectDir,
                TestUtil::defaultConfig,
                settingsFile -> settingsFile.plugin(SettingsFile.Plugins.FOOJAY),
                projectFile -> {
                    projectFile.plugin(ProjectFile.Plugins.APPLICATION);
                    projectFile.plugin(ProjectFile.Plugins.HOTSWAP);
                    projectFile.append(ProjectFile.Options.APPLICATION_MAIN);
                    projectFile.setMainCodeJDKLOG();
                    projectFile.append(ProjectFile.Options.REQUEST_HOTSWAP_JDK_11);
                });

        var buildResult = runner.withArguments("run --stacktrace").build();
        Assertions.assertTrue(TestUtil.isAgentActive(buildResult));
    }

    @Test
    void canProvideJDK17Agent() {
        var runner = TestUtil.provideTestRunner(
                projectDir,
                TestUtil::defaultConfig,
                settingsFile -> settingsFile.plugin(SettingsFile.Plugins.FOOJAY),
                projectFile -> {
                    projectFile.plugin(ProjectFile.Plugins.APPLICATION);
                    projectFile.plugin(ProjectFile.Plugins.HOTSWAP);
                    projectFile.append(ProjectFile.Options.APPLICATION_MAIN);
                    projectFile.setMainCodeJDKLOG();
                    projectFile.append(ProjectFile.Options.REQUEST_HOTSWAP_JDK_17);
                });

        var buildResult = runner.withArguments("run").build();
        Assertions.assertTrue(TestUtil.isAgentActive(buildResult));
    }

    @Test
    void canProvideJDK21Agent() {
        var runner = TestUtil.provideTestRunner(
                projectDir,
                TestUtil::defaultConfig,
                settingsFile -> settingsFile.plugin(SettingsFile.Plugins.FOOJAY),
                projectFile -> {
                    projectFile.plugin(ProjectFile.Plugins.APPLICATION);
                    projectFile.plugin(ProjectFile.Plugins.HOTSWAP);
                    projectFile.append(ProjectFile.Options.APPLICATION_MAIN);
                    projectFile.setMainCodeJDKLOG();
                    projectFile.append(ProjectFile.Options.REQUEST_HOTSWAP_JDK_21);
                });

        var buildResult = runner.withArguments("run").build();
        Assertions.assertTrue(TestUtil.isAgentActive(buildResult));
    }
}
