plugins {
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'maven-publish'
    id("java-conventions")
    id("jebel-conventions")
    id("spotless-conventions")
}

version = "0.2.0"
group = "io.github.srdjan-v"

afterEvaluate {
    tasks.named('jar', Jar) {
        from(project(":dcevm-detect").sourceSets.main.output)
    }
    tasks.named('sourcesJar', Jar) {
        from(project(":dcevm-detect").sourceSets.main.allJava)
    }
}
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:-missing', '-quiet')
}

dependencies {
    implementation gradleTestKit()
    implementation(project(":dcevm-detect").sourceSets.main.output)
    implementation(project(":dcevm-detect").configurations.implementation.incoming.dependencies)

    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    //implementation 'com.google.guava:guava:31.1-jre'

    implementation "org.apache.httpcomponents:httpclient:4.5.14"
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

gradlePlugin {
    website = "https://github.com/Srdjan-V/HotSwapGradle"
    vcsUrl = "https://github.com/Srdjan-V/HotSwapGradle"
    plugins {
        hotSwapGradle {
            id = 'io.github.srdjan-v.hotswap-gradle'
            implementationClass = 'io.github.srdjanv.hotswapgradle.HotswapGradlePlugin'
            displayName = 'Hotswap Gradle plugin'
            description = "This is an utility plugin to locate Dcevm and download HotswapAgent for individual JavaExec tasks"
            tags = ["java", "JVM", "DCEVM", "HotswapAgent"]
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

//jebel
configurations.functionalTestAnnotationProcessor.extendsFrom(configurations.testAnnotationProcessor)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
